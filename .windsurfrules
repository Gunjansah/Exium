
  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.

  When designing UI:
  - Design a website inspired by the design principles of Apple and the philosophies of Steve Jobs, Jony Ive, and Dieter Rams. The website should be minimalist, intuitive, and focused on user experience. Apply the following guidelines:
      - Simplicity and Clarity: The layout should be clean and uncluttered, with intuitive navigation and minimal visual distractions. Every design element should serve a purpose and align with the overall goal of simplicity.

      - High-Quality Aesthetic: Use a refined color palette with neutral, calming tones and subtle accent colors. The design should evoke a sense of modern elegance, utilizing white space effectively to let each element breathe. Typography should be clear, modern, and unobtrusive, similar to Apple's approach.

      - Function Over Form: All design choices should prioritize usability and function. Use visual hierarchy to guide users toward important information, with a clear call-to-action that doesn't overwhelm. Elements like buttons and icons should be easy to understand at a glance.

      - Precision in Details: Pay close attention to every design detail, such as button placement, font size, spacing, and interactions. Every element should feel cohesive and polished, inspired by the high standards of Apple design and Rams' principle of 'less but better.'

      - Human-Centered Design: Keep the user's experience at the forefront. Create a seamless, responsive design that is accessible and enjoyable on all devices, especially mobile.

     - Design this website with a timeless, elegant look, suitable for an innovative tech product or lifestyle brand. Focus on delivering a functional, memorable experience that reflects the design philosophies of Apple and Dieter Rams, aiming for beauty through simplicity and clarity."

     - Whenever you can simplify the code, do it. Make sure it's always as simple as possible, yet elegant. Don't use dark blue unless it's absolutely necessary. Use glassmorphism and blur whenever it fits.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  
