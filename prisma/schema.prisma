generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  passwordHash      String
  role              Role                @default(STUDENT)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  firstName         String?
  lastName          String?
  profileImage      String?
  calendarEvents    CalendarEvent[]
  canvasAccounts    CanvasIntegration[]
  enrolledClasses   ClassEnrollment[]
  teachingClasses   Class[]             @relation("TeacherClasses")
  enrollments       ExamEnrollment[]
  examsCreated      Exam[]              @relation("TeacherExams")
  ProctoringLog     ProctoringLog[]
  violations        SecurityViolation[]
  submissions       Submission[]
  feedbacksGiven    TeacherFeedback[]   @relation("TeacherFeedbacks")
  feedbacksReceived TeacherFeedback[]
  enrollmentRequests EnrollmentRequest[]

  @@map("users")
}

model Class {
  id             String            @id @default(uuid())
  name           String
  description    String?
  code           String            @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  teacherId      String
  calendarEvents CalendarEvent[]
  enrollments    ClassEnrollment[]
  teacher        User              @relation("TeacherClasses", fields: [teacherId], references: [id])
  exams          Exam[]
  feedbacks      TeacherFeedback[]
  enrollmentRequests EnrollmentRequest[]

  @@map("classes")
}

model ClassEnrollment {
  id         String   @id @default(uuid())
  classId    String
  userId     String
  role       Role     @default(STUDENT)
  enrolledAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
  @@map("class_enrollments")
}

model CanvasIntegration {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("canvas_integrations")
}

model Exam {
  id                     String              @id @default(uuid())
  title                  String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  createdBy              String
  classId                String
  description            String?
  duration               Int
  endTime                DateTime?
  startTime              DateTime?
  status                 ExamStatus          @default(DRAFT)
  blockClipboard         Boolean             @default(true)
  blockKeyboardShortcuts Boolean             @default(true)
  blockMultipleTabs      Boolean             @default(true)
  blockRightClick        Boolean             @default(true)
  blockSearchEngines     Boolean             @default(true)
  browserMonitoring      Boolean             @default(true)
  deviceTracking         Boolean             @default(true)
  fullScreenMode         Boolean             @default(true)
  maxViolations          Int                 @default(3)
  periodicUserValidation Boolean             @default(true)
  resumeCount            Int                 @default(1)
  screenshotBlocking     Boolean             @default(true)
  securityLevel          SecurityLevel       @default(STANDARD)
  webcamRequired         Boolean             @default(false)
  calendarEvents         CalendarEvent[]
  enrollments            ExamEnrollment[]
  class                  Class               @relation(fields: [classId], references: [id])
  teacher                User                @relation("TeacherExams", fields: [createdBy], references: [id])
  ProctoringLog          ProctoringLog[]
  questions              Question[]
  securityViolations     SecurityViolation[]
  submissions            Submission[]
  feedbacks              TeacherFeedback[]

  @@map("exams")
}

model SecurityViolation {
  id        String        @id @default(uuid())
  examId    String
  userId    String
  type      ViolationType
  timestamp DateTime      @default(now())
  details   Json?
  exam      Exam          @relation(fields: [examId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@map("security_violations")
}

model ExamEnrollment {
  id             String              @id @default(uuid())
  examId         String
  userId         String
  enrolledAt     DateTime           @default(now())
  isLocked       Boolean            @default(false)
  violationCount Int                @default(0)
  status         ExamEnrollmentStatus @default(NOT_STARTED)
  startTime      DateTime?
  endTime        DateTime?
  exam           Exam               @relation(fields: [examId], references: [id])
  user           User               @relation(fields: [userId], references: [id])

  @@map("exam_enrollments")
}

model Question {
  id              String          @id @default(cuid())
  examId          String
  exam            Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  type            QuestionType
  difficulty      DifficultyLevel @default(MEDIUM)
  points          Int             @default(1)
  content         String          @db.Text
  correctAnswer   String?         @db.Text
  options         Json?           // For multiple choice questions
  explanation     String?         @db.Text
  orderIndex      Int             // For question ordering
  timeLimit       Int?            // Time limit in seconds, null for no limit
  codeTemplate    String?         @db.Text // For coding questions
  testCases       Json?           // For coding questions
  rubric          String?         @db.Text // For long answer questions
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([examId])
}

model Submission {
  id          String   @id @default(uuid())
  examId      String
  userId      String
  answer      String
  score       Float?
  submittedAt DateTime @default(now())
  exam        Exam     @relation(fields: [examId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model ProctoringLog {
  id        String   @id @default(uuid())
  userId    String
  examId    String
  eventType String
  timestamp DateTime @default(now())
  meta      Json?
  exam      Exam     @relation(fields: [examId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("proctoring_logs")
}

model TeacherFeedback {
  id        String       @id @default(uuid())
  userId    String
  teacherId String
  examId    String?
  classId   String
  message   String
  type      FeedbackType
  createdAt DateTime     @default(now())
  class     Class        @relation(fields: [classId], references: [id])
  exam      Exam?        @relation(fields: [examId], references: [id])
  teacher   User         @relation("TeacherFeedbacks", fields: [teacherId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@map("teacher_feedbacks")
}

model CalendarEvent {
  id          String      @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  type        EventType
  status      EventStatus @default(UPCOMING)
  userId      String
  classId     String?
  examId      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       Class?      @relation(fields: [classId], references: [id])
  exam        Exam?       @relation(fields: [examId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("calendar_events")
}

model EnrollmentRequest {
  id         String           @id @default(uuid())
  classId    String
  userId     String
  status     RequestStatus    @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  class      Class           @relation(fields: [classId], references: [id])
  user       User            @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
  @@map("enrollment_requests")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  LONG_ANSWER
  TRUE_FALSE
  MATCHING
  CODING
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum SecurityLevel {
  MINIMAL
  STANDARD
  STRICT
}

enum ViolationType {
  TAB_SWITCH
  FULL_SCREEN_EXIT
  KEYBOARD_SHORTCUT
  RIGHT_CLICK
  CLIPBOARD_USAGE
  SEARCH_ENGINE_DETECTED
  MULTIPLE_DEVICES
  WEBCAM_VIOLATION
  SCREEN_SHARING
  PERIODIC_CHECK_FAILED
  SCREENSHOT_ATTEMPT
  INACTIVITY
  DEVICE_CHANGE
  NETWORK_CHANGE
  BROWSER_EXTENSION_DETECTED
  API_TAMPERING
  AUTOMATION_DETECTED
  VIRTUAL_MACHINE_DETECTED
  PROXY_DETECTED
  FACE_NOT_VISIBLE
  MULTIPLE_FACES_DETECTED
  SUSPICIOUS_MOVEMENT
  UNAUTHORIZED_OBJECT
  AUDIO_DETECTION
}

enum FeedbackType {
  GENERAL
  EXAM_RELATED
  PERFORMANCE
  IMPROVEMENT
  APPRECIATION
}

enum EventType {
  EXAM
  DEADLINE
  ASSIGNMENT
  MEETING
  REMINDER
  OTHER
}

enum EventStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ExamEnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SUBMITTED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
