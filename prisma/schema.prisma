generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String              @id @default(uuid())
  email           String              @unique
  passwordHash    String
  role            Role                @default(STUDENT)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  firstName       String?
  lastName        String?
  profileImage    String?
  canvasAccounts  CanvasIntegration[]
  enrolledClasses ClassEnrollment[]
  teachingClasses Class[]             @relation("TeacherClasses")
  enrollments     ExamEnrollment[]
  examsCreated    Exam[]              @relation("TeacherExams")
  ProctoringLog   ProctoringLog[]
  violations      SecurityViolation[]
  submissions     Submission[]

  @@map("users")
}

model Class {
  id          String            @id @default(uuid())
  name        String
  description String?
  code        String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  teacherId   String
  enrollments ClassEnrollment[]
  teacher     User              @relation("TeacherClasses", fields: [teacherId], references: [id])
  exams       Exam[]

  @@map("classes")
}

model ClassEnrollment {
  id         String   @id @default(uuid())
  classId    String
  userId     String
  role       Role     @default(STUDENT)
  enrolledAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
  @@map("class_enrollments")
}

model CanvasIntegration {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("canvas_integrations")
}

model Exam {
  id                     String              @id @default(uuid())
  title                  String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  createdBy              String
  classId                String
  description            String?
  duration               Int
  endTime                DateTime?
  startTime              DateTime?
  status                 ExamStatus          @default(DRAFT)
  blockClipboard         Boolean             @default(true)
  blockKeyboardShortcuts Boolean             @default(true)
  blockMultipleTabs      Boolean             @default(true)
  blockRightClick        Boolean             @default(true)
  blockSearchEngines     Boolean             @default(true)
  browserMonitoring      Boolean             @default(true)
  deviceTracking         Boolean             @default(true)
  fullScreenMode         Boolean             @default(true)
  maxViolations          Int                 @default(3)
  periodicUserValidation Boolean             @default(true)
  resumeCount            Int                 @default(1)
  screenshotBlocking     Boolean             @default(true)
  securityLevel          SecurityLevel       @default(STANDARD)
  webcamRequired         Boolean             @default(false)
  enrollments            ExamEnrollment[]
  class                  Class               @relation(fields: [classId], references: [id])
  teacher                User                @relation("TeacherExams", fields: [createdBy], references: [id])
  ProctoringLog          ProctoringLog[]
  questions              Question[]
  securityViolations     SecurityViolation[]
  submissions            Submission[]

  @@map("exams")
}

model SecurityViolation {
  id        String        @id @default(uuid())
  examId    String
  userId    String
  type      ViolationType
  timestamp DateTime      @default(now())
  details   Json?
  exam      Exam          @relation(fields: [examId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@map("security_violations")
}

model ExamEnrollment {
  id             String   @id @default(uuid())
  examId         String
  userId         String
  enrolledAt     DateTime @default(now())
  isLocked       Boolean  @default(false)
  violationCount Int      @default(0)
  exam           Exam     @relation(fields: [examId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@map("exam_enrollments")
}

model Question {
  id           String       @id @default(uuid())
  examId       String
  questionText String
  type         QuestionType
  testCases    Json?
  choices      Json?
  createdAt    DateTime     @default(now())
  order        Int          @default(0)
  points       Int          @default(1)
  exam         Exam         @relation(fields: [examId], references: [id])

  @@map("questions")
}

model Submission {
  id          String   @id @default(uuid())
  examId      String
  userId      String
  answer      String
  score       Float?
  submittedAt DateTime @default(now())
  exam        Exam     @relation(fields: [examId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model ProctoringLog {
  id        String   @id @default(uuid())
  userId    String
  examId    String
  eventType String
  timestamp DateTime @default(now())
  meta      Json?
  exam      Exam     @relation(fields: [examId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("proctoring_logs")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum QuestionType {
  CODING
  MULTIPLE_CHOICE
  SHORT_ANSWER
  ESSAY
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum SecurityLevel {
  MINIMAL
  STANDARD
  STRICT
}

enum ViolationType {
  TAB_SWITCH
  FULL_SCREEN_EXIT
  KEYBOARD_SHORTCUT
  RIGHT_CLICK
  CLIPBOARD_USAGE
  SEARCH_ENGINE_DETECTED
  MULTIPLE_DEVICES
  WEBCAM_VIOLATION
  SCREEN_SHARING
  PERIODIC_CHECK_FAILED
}
