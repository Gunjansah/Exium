generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String              @id @default(uuid())
  email          String              @unique
  firstName      String?
  lastName       String?
  profileImage   String?
  passwordHash   String
  role           Role                @default(STUDENT)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  // Relations
  examsCreated   Exam[]              @relation("TeacherExams")
  enrollments    ExamEnrollment[]
  submissions    Submission[]
  canvasAccounts CanvasIntegration[]
  ProctoringLog  ProctoringLog[]
  violations     SecurityViolation[]
  // Class relations
  teachingClasses Class[]            @relation("TeacherClasses")
  enrolledClasses ClassEnrollment[]
  feedbacksReceived TeacherFeedback[] @relation()
  feedbacksGiven    TeacherFeedback[] @relation("TeacherFeedbacks")
  calendarEvents   CalendarEvent[]

  @@map("users")
}

model Class {
  id          String            @id @default(uuid())
  name        String
  description String?
  code        String            @unique // Unique code for students to join
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  teacherId   String
  // Relations
  teacher     User              @relation("TeacherClasses", fields: [teacherId], references: [id])
  enrollments ClassEnrollment[]
  exams       Exam[]
  feedbacks   TeacherFeedback[]
  calendarEvents CalendarEvent[]
  
  @@map("classes")
}

model ClassEnrollment {
  id        String   @id @default(uuid())
  classId   String
  userId    String
  role      Role     @default(STUDENT)
  enrolledAt DateTime @default(now())
  // Relations
  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
  @@map("class_enrollments")
}

model CanvasIntegration {
  id        String   @id @default(uuid())
  userId    String
  token     String // The OAuth token from Canvas
  createdAt DateTime @default(now())
  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("canvas_integrations")
}

model Exam {
  id              String              @id @default(uuid())
  title           String
  description     String?
  duration        Int                 // Duration in minutes
  startTime       DateTime?           // Optional scheduled start time
  endTime         DateTime?           // Optional scheduled end time
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdBy       String             // Teacher's userId
  classId         String             // Class this exam belongs to
  status          ExamStatus         @default(DRAFT)
  // Security Settings
  securityLevel   SecurityLevel      @default(STANDARD)
  maxViolations   Int                @default(3)  // Max violations before auto-lock
  // Security Features
  fullScreenMode  Boolean            @default(true)
  blockMultipleTabs Boolean          @default(true)
  blockKeyboardShortcuts Boolean     @default(true)
  blockRightClick Boolean            @default(true)
  blockClipboard Boolean             @default(true)
  browserMonitoring Boolean          @default(true)
  blockSearchEngines Boolean         @default(true)
  resumeCount     Int                @default(1)  // Number of times exam can be resumed
  webcamRequired  Boolean            @default(false)
  deviceTracking  Boolean            @default(true)
  screenshotBlocking Boolean         @default(true)
  periodicUserValidation Boolean     @default(true)
  // Relations
  teacher         User               @relation("TeacherExams", fields: [createdBy], references: [id])
  class           Class              @relation(fields: [classId], references: [id])
  questions       Question[]
  enrollments     ExamEnrollment[]
  submissions     Submission[]
  ProctoringLog   ProctoringLog[]
  securityViolations SecurityViolation[]
  feedbacks       TeacherFeedback[]
  calendarEvents  CalendarEvent[]

  @@map("exams")
}

model SecurityViolation {
  id          String   @id @default(uuid())
  examId      String
  userId      String
  type        ViolationType
  timestamp   DateTime @default(now())
  details     Json?    // Additional violation details
  // Relations
  exam        Exam     @relation(fields: [examId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("security_violations")
}

model ExamEnrollment {
  id           String   @id @default(uuid())
  examId       String
  userId       String
  enrolledAt   DateTime @default(now())
  violationCount Int    @default(0)
  isLocked     Boolean  @default(false)
  // Relations
  exam         Exam     @relation(fields: [examId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("exam_enrollments")
}

model Question {
  id           String       @id @default(uuid())
  examId       String
  questionText String
  type         QuestionType
  points       Int         @default(1)
  order        Int         @default(0)
  // For coding questions, store testCases in JSON
  // For quiz questions, store multiple choices or correct answer in JSON as well
  testCases    Json?
  choices      Json? // For multiple-choice, short-answer, etc.
  createdAt    DateTime     @default(now())
  // Relations
  exam         Exam         @relation(fields: [examId], references: [id])

  @@map("questions")
}

model Submission {
  id          String   @id @default(uuid())
  examId      String
  userId      String
  answer      String // Could be code or quiz answers (serialized JSON)
  score       Float? // Null until grading is done
  submittedAt DateTime @default(now())
  // Relations
  exam        Exam     @relation(fields: [examId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model ProctoringLog {
  id        String   @id @default(uuid())
  userId    String
  examId    String
  eventType String // e.g., "TAB_SWITCH", "COPY_PASTE"
  timestamp DateTime @default(now())
  meta      Json? // optional JSON with more details
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])

  @@map("proctoring_logs")
}

model TeacherFeedback {
  id          String   @id @default(uuid())
  userId      String   // Student who received the feedback
  teacherId   String   // Teacher who gave the feedback
  examId      String?  // Optional: Related exam
  classId     String   // Related class
  message     String
  type        FeedbackType
  createdAt   DateTime @default(now())
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  teacher     User     @relation("TeacherFeedbacks", fields: [teacherId], references: [id])
  exam        Exam?    @relation(fields: [examId], references: [id])
  class       Class    @relation(fields: [classId], references: [id])

  @@map("teacher_feedbacks")
}

model CalendarEvent {
  id          String       @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  type        EventType
  status      EventStatus  @default(UPCOMING)
  userId      String      // Student who owns this event
  classId     String?     // Optional: Related class
  examId      String?     // Optional: Related exam
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  class       Class?      @relation(fields: [classId], references: [id])
  exam        Exam?       @relation(fields: [examId], references: [id])

  @@map("calendar_events")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum QuestionType {
  CODING
  MULTIPLE_CHOICE
  SHORT_ANSWER
  ESSAY
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum SecurityLevel {
  MINIMAL     // Basic security features
  STANDARD    // Recommended security level
  STRICT      // Maximum security
}

enum ViolationType {
  TAB_SWITCH
  FULL_SCREEN_EXIT
  KEYBOARD_SHORTCUT
  RIGHT_CLICK
  CLIPBOARD_USAGE
  SEARCH_ENGINE_DETECTED
  MULTIPLE_DEVICES
  WEBCAM_VIOLATION
  SCREEN_SHARING
  PERIODIC_CHECK_FAILED
}

enum FeedbackType {
  GENERAL
  EXAM_RELATED
  PERFORMANCE
  IMPROVEMENT
  APPRECIATION
}

enum EventType {
  EXAM
  DEADLINE
  ASSIGNMENT
  MEETING
  REMINDER
  OTHER
}

enum EventStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}